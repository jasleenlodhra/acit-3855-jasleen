  version: '3.3'
  services:
    zookeeper:
      image: wurstmeister/zookeeper
      ports:
        - "2181"
      hostname: zookeeper
      volumes:
        - /home/azureuser/zookeeper/data:/opt/zookeeper-3.4.13/data #This makes Kafka Topics Are Persisting (This was not here before to intentionally done to allow for debugging and troubleshooting without having to deal with old data in the Kafka message queue.) 9*2
    kafka:
      image: wurstmeister/kafka
      command: [start-kafka.sh]
      ports:
        - "9092:9092"
      hostname: kafka
      environment:
        KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas 
        KAFKA_ADVERTISED_HOST_NAME: "microservice-jasleen-new.eastus.cloudapp.azure.com" # docker-machine ip
        KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
        KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
        KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://microservice-jasleen-new.eastus.cloudapp.azure.com:9092 
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT 
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181   #This makes Kafka Topics Are Persisting (This was not here before to intentionally done to allow for debugging and troubleshooting without having to deal with old data in the Kafka message queue.) 9*2
        KAFKA_LOG_DIRS: /kafka/kafka-logs   #This makes Kafka Topics Are Persisting (This was not here before to intentionally done to allow for debugging and troubleshooting without having to deal with old data in the Kafka message queue.) 9*2
        KAFKA_BROKER_ID: 1
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock 
        - /home/azureuser/kafka:/kafka/kafka-logs #This makes Kafka Topics Are Persisting (This was not here before to intentionally done to allow for debugging and troubleshooting without having to deal with old data in the Kafka message queue.) 9*2
      depends_on:
        - "zookeeper"
    db:
      image: mysql:5.7
      restart: always
      environment:
        MYSQL_DATABASE: 'events'
        # So you don't have to use root, but you can if you like
        MYSQL_USER: 'user'
        # You can use whatever password you like
        MYSQL_PASSWORD: 'Password'
        # Password for root access
        MYSQL_ROOT_PASSWORD: 'Password'
      ports:
        # <Port exposed> : < MySQL Port running inside container>
        - '3306:3306'
      expose:
        # Opens port 3306 on the container
        - '3306'
        # Where our data will be persisted
      volumes:
        - my-db:/var/lib/mysql

    receiver:
      build: ../receiver
      image: receiver:latest 
      ports:
        - "8080:8080"
      environment:
        - TARGET_ENV=test
      volumes:
        - /home/azureuser/config/receiver:/config
        - /home/azureuser/logs:/logs
      depends_on: 
        - "kafka"
    
    storage:
      build: ../storage
      image: storage:latest
      ports: 
        - "8090:8090"
      environment:
        - TARGET_ENV=test
      volumes:
        - /home/azureuser/config/storage:/config
        - /home/azureuser/logs:/logs
      depends_on:
        - "kafka"
    
    processing:
      build: ../processing
      image: processing:latest
      network_mode: "host"
      environment:
        - TARGET_ENV=test
      volumes:
        - /home/azureuser/config/processing:/config
        - /home/azureuser/logs:/logs
        - processing-db:/data
      depends_on:
        - "storage"
    
    audit_log:
      build: ../audit_log
      image: audit_log:latest
      ports:
        - "8200:8200"
      environment:
        - TARGET_ENV=test
      volumes:
        - /home/azureuser/config/audit_log:/config
        - /home/azureuser/logs:/logs
      depends_on:
        - "kafka"
    
    dashboard:
      build: ../dashboard-ui
      image: dashboard:latest
      ports:
        - "3000:3000"
      depends_on:
        - "processing"
        - "audit_log"
        
  # Names our volume
  volumes:
    my-db:
    processing-db:
